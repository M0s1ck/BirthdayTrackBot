using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
using AccessConfiguration;

namespace BirthDayTrack;

/// <summary>
/// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
/// </summary>
internal static class Formatter
{
    internal static readonly Regex DateForm = new Regex(@"(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])");
    
    internal static string GetConnectionString(DataBaseInfo dataBaseInfo)
    {
        string server = dataBaseInfo.Server;
        string db = dataBaseInfo.Database;
        string uid = dataBaseInfo.Uid;
        string password = dataBaseInfo.Password;
        bool pooling = dataBaseInfo.Pooling;
        int minPoolsize = dataBaseInfo.MinPoolSize;
        int maxPoolsize = dataBaseInfo.MaxPoolSize;
        return $"Server={server};Database={db};Uid={uid};Password={password};Pooling={pooling.ToString().ToLower()};MinPoolSize={minPoolsize};MaxPoolSize={maxPoolsize};";
    }
    
    internal static string FormatUsers(IOrderedEnumerable<Tuple<string, DateOnly>> users)
    {
        StringBuilder sbd = new();
        foreach (Tuple<string, DateOnly> tup in users)
        {
            string name = tup.Item1;
            DateOnly date = tup.Item2;
            sbd.Append($"{name} - {date.Day} {Months[date.Month]}{Environment.NewLine}");
        }

        return sbd.ToString();
    }

    internal static bool IsValidDate(string dateText)
    {
        return DateTime.TryParseExact(dateText, "dd.MM", CultureInfo.InvariantCulture, DateTimeStyles.None, out _);  
    }
    
    private static readonly Dictionary<int, string> Months = new Dictionary<int, string>
    {
        { 1, "—è–Ω–≤–∞—Ä—è" },
        { 2, "—Ñ–µ–≤—Ä–∞–ª—è" },
        { 3, "–º–∞—Ä—Ç–∞" },
        { 4, "–∞–ø—Ä–µ–ª—è" },
        { 5, "–º–∞—è" },
        { 6, "–∏—é–Ω—è" },
        { 7, "–∏—é–ª—è" },
        { 8, "–∞–≤–≥—É—Å—Ç–∞" },
        { 9, "—Å–µ–Ω—Ç—è–±—Ä—è" },
        { 10, "–æ–∫—Ç—è–±—Ä—è" },
        { 11, "–Ω–æ—è–±—Ä—è" },
        { 12, "–¥–µ–∫–∞–±—Ä—è" }
    };
    
    
    internal static readonly Dictionary<string, string> TextReplies = new Dictionary<string, string>
    {
        {
            "/start", //"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –¥—Ä.\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è\n(—Ñ–æ—Ä–º–∞—Ç - dd.mm, –Ω–∞–ø—Ä–∏–º–µ—Ä 07.06 –∏–ª–∏ 25.10)"
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –¥—Ä.\n –î–æ–ª–∂–Ω–æ –±—ã—Ç—å, —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º, –≤–≤–µ–¥–∏ –µ–≥–æ \ud83d\ude42"
        },
        {
            "–ò–∑–º–µ–Ω–∏—Ç—å –º–æ—ë –¥—Ä",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë –¥—Ä?"
        },
        {
            "–ù–µ—Ç",
            "–ù—É —Ö–æ—Ä–æ—à–æ"
        },
        {
            "–£–¥–∞–ª–∏—Ç—å –º–µ–Ω—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—Å —É–¥–∞–ª–∏–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?\n(–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –¥—Ä –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –æ –Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)"
        },
        {
            "–ü–æ–∫–∞",
            "–ü–æ–∫–∞ üò≥"
        }
    };

    
    internal static readonly Dictionary<State, string> ModifyReplies = new Dictionary<State, string>
    {
        {
            State.Updating,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç - dd.mm, –Ω–∞–ø—Ä–∏–º–µ—Ä 07.06 –∏–ª–∏ 25.10)"
        },
        {
            State.Deleting,
            "–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —É–≤–∏–¥—è—Ç –≤–∞—à–µ –¥—Ä \ud83d\ude2d\n" +
            "(–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start)"
        }
    };
    
    internal static string Secret { get; set; }
}